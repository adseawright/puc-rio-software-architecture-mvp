{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Seawright\\\\Documents\\\\PUC\\\\jrpreneur\\\\src\\\\components\\\\Checkout.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Checkout = () => {\n  _s();\n  const navigate = useNavigate();\n\n  // useEffect to handle loading the PayPal buttons and navigating if the cart is empty\n  useEffect(() => {\n    // Fetch cart items from localStorage\n    const cart = JSON.parse(localStorage.getItem('cart')) || [];\n\n    // If the cart is empty, navigate back to the storefront\n    if (cart.length === 0) {\n      navigate('/storefront');\n      return;\n    }\n\n    // Calculate the total amount for the purchase\n    const totalAmount = cart.reduce((total, item) => total + parseFloat(item.price), 0).toFixed(2);\n\n    // Function to load PayPal buttons\n    const loadPaypalButtons = () => {\n      if (window.paypal) {\n        // Render PayPal buttons\n        window.paypal.Buttons({\n          createOrder: (data, actions) => {\n            // Create an order with the total amount\n            return actions.order.create({\n              purchase_units: [{\n                amount: {\n                  value: totalAmount,\n                  // Correctly formatted total amount\n                  currency_code: 'USD'\n                }\n              }]\n            });\n          },\n          onApprove: (data, actions) => {\n            // Capture the order on approval\n            return actions.order.capture().then(details => {\n              handlePaymentSuccess(details, data);\n            });\n          }\n        }).render('#paypal-button-container');\n      } else {\n        // Retry loading PayPal buttons if PayPal script is not yet loaded\n        setTimeout(loadPaypalButtons, 100);\n      }\n    };\n    loadPaypalButtons();\n  }, [navigate]);\n\n  // Function to handle successful payment\n  const handlePaymentSuccess = (details, data) => {\n    alert('Transaction completed by ' + details.payer.name.given_name);\n    localStorage.removeItem('cart'); // Clear the cart from localStorage\n    navigate('/storefront'); // Navigate back to storefront\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Checkout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"paypal-button-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(Checkout, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = Checkout;\nexport default Checkout;\nvar _c;\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"names":["React","useEffect","useNavigate","jsxDEV","_jsxDEV","Checkout","_s","navigate","cart","JSON","parse","localStorage","getItem","length","totalAmount","reduce","total","item","parseFloat","price","toFixed","loadPaypalButtons","window","paypal","Buttons","createOrder","data","actions","order","create","purchase_units","amount","value","currency_code","onApprove","capture","then","details","handlePaymentSuccess","render","setTimeout","alert","payer","name","given_name","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/Seawright/Documents/PUC/jrpreneur/src/components/Checkout.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Checkout = () => {\r\n    const navigate = useNavigate();\r\n\r\n    // useEffect to handle loading the PayPal buttons and navigating if the cart is empty\r\n    useEffect(() => {\r\n        // Fetch cart items from localStorage\r\n        const cart = JSON.parse(localStorage.getItem('cart')) || [];\r\n        \r\n        // If the cart is empty, navigate back to the storefront\r\n        if (cart.length === 0) {\r\n            navigate('/storefront');\r\n            return;\r\n        }\r\n\r\n        // Calculate the total amount for the purchase\r\n        const totalAmount = cart.reduce((total, item) => total + parseFloat(item.price), 0).toFixed(2);\r\n\r\n        // Function to load PayPal buttons\r\n        const loadPaypalButtons = () => {\r\n            if (window.paypal) {\r\n                // Render PayPal buttons\r\n                window.paypal.Buttons({\r\n                    createOrder: (data, actions) => {\r\n                        // Create an order with the total amount\r\n                        return actions.order.create({\r\n                            purchase_units: [{\r\n                                amount: {\r\n                                    value: totalAmount, // Correctly formatted total amount\r\n                                    currency_code: 'USD'\r\n                                }\r\n                            }]\r\n                        });\r\n                    },\r\n                    onApprove: (data, actions) => {\r\n                        // Capture the order on approval\r\n                        return actions.order.capture().then((details) => {\r\n                            handlePaymentSuccess(details, data);\r\n                        });\r\n                    }\r\n                }).render('#paypal-button-container');\r\n            } else {\r\n                // Retry loading PayPal buttons if PayPal script is not yet loaded\r\n                setTimeout(loadPaypalButtons, 100);\r\n            }\r\n        };\r\n\r\n        loadPaypalButtons();\r\n    }, [navigate]);\r\n\r\n    // Function to handle successful payment\r\n    const handlePaymentSuccess = (details, data) => {\r\n        alert('Transaction completed by ' + details.payer.name.given_name);\r\n        localStorage.removeItem('cart'); // Clear the cart from localStorage\r\n        navigate('/storefront'); // Navigate back to storefront\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Checkout</h2>\r\n            <div id=\"paypal-button-container\"></div> {/* Container for PayPal buttons */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkout;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMO,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE;;IAE3D;IACA,IAAIJ,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE;MACnBN,QAAQ,CAAC,aAAa,CAAC;MACvB;IACJ;;IAEA;IACA,MAAMO,WAAW,GAAGN,IAAI,CAACO,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI,KAAKD,KAAK,GAAGE,UAAU,CAACD,IAAI,CAACE,KAAK,CAAC,EAAE,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;;IAE9F;IACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;MAC5B,IAAIC,MAAM,CAACC,MAAM,EAAE;QACf;QACAD,MAAM,CAACC,MAAM,CAACC,OAAO,CAAC;UAClBC,WAAW,EAAEA,CAACC,IAAI,EAAEC,OAAO,KAAK;YAC5B;YACA,OAAOA,OAAO,CAACC,KAAK,CAACC,MAAM,CAAC;cACxBC,cAAc,EAAE,CAAC;gBACbC,MAAM,EAAE;kBACJC,KAAK,EAAElB,WAAW;kBAAE;kBACpBmB,aAAa,EAAE;gBACnB;cACJ,CAAC;YACL,CAAC,CAAC;UACN,CAAC;UACDC,SAAS,EAAEA,CAACR,IAAI,EAAEC,OAAO,KAAK;YAC1B;YACA,OAAOA,OAAO,CAACC,KAAK,CAACO,OAAO,CAAC,CAAC,CAACC,IAAI,CAAEC,OAAO,IAAK;cAC7CC,oBAAoB,CAACD,OAAO,EAAEX,IAAI,CAAC;YACvC,CAAC,CAAC;UACN;QACJ,CAAC,CAAC,CAACa,MAAM,CAAC,0BAA0B,CAAC;MACzC,CAAC,MAAM;QACH;QACAC,UAAU,CAACnB,iBAAiB,EAAE,GAAG,CAAC;MACtC;IACJ,CAAC;IAEDA,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAM+B,oBAAoB,GAAGA,CAACD,OAAO,EAAEX,IAAI,KAAK;IAC5Ce,KAAK,CAAC,2BAA2B,GAAGJ,OAAO,CAACK,KAAK,CAACC,IAAI,CAACC,UAAU,CAAC;IAClEjC,YAAY,CAACkC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACjCtC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAC7B,CAAC;EAED,oBACIH,OAAA;IAAA0C,QAAA,gBACI1C,OAAA;MAAA0C,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB9C,OAAA;MAAK+C,EAAE,EAAC;IAAyB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEd,CAAC;AAAC5C,EAAA,CA9DID,QAAQ;EAAA,QACOH,WAAW;AAAA;AAAAkD,EAAA,GAD1B/C,QAAQ;AAgEd,eAAeA,QAAQ;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}